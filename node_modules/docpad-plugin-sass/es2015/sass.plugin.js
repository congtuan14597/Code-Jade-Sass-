'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Generated by CoffeeScript 2.3.1
// Export Plugin
module.exports = function (BasePlugin) {
  var SassPlugin, TaskGroup, fs, safeps;
  // Requires
  safeps = require('safeps');
  fs = require('fs');

  var _require = require('taskgroup');

  TaskGroup = _require.TaskGroup;

  return SassPlugin = function () {
    // Define Plugin
    var SassPlugin = function (_BasePlugin) {
      _inherits(SassPlugin, _BasePlugin);

      function SassPlugin() {
        _classCallCheck(this, SassPlugin);

        return _possibleConstructorReturn(this, (SassPlugin.__proto__ || Object.getPrototypeOf(SassPlugin)).apply(this, arguments));
      }

      _createClass(SassPlugin, [{
        key: 'generateBefore',

        // Generate Before
        value: function generateBefore(opts, next) {
          var config, tasks;
          // Prepare
          config = this.config;
          // Group
          tasks = new TaskGroup({
            concurrency: 0
          }).done(next);
          // Determine if compass is installed
          if (config.compass == null) {
            tasks.addTask(function (complete) {
              return safeps.getExecPath('compass', function (err, path) {
                config.compass = path != null;
                return complete();
              });
            });
          }
          // Determine sass executable path
          ['sass', 'scss'].forEach(function (thing) {
            if (config[thing + 'Path'] == null) {
              return tasks.addTask(function (complete) {
                return safeps.getExecPath(thing, function (err, path) {
                  config[thing + 'Path'] = path != null ? path : false;
                  return complete();
                });
              });
            }
          });
          // Fire tasks
          return tasks.run();
        }

        // Prevent underscore

      }, {
        key: 'extendCollections',
        value: function extendCollections(opts) {
          var config, docpad;
          // Prepare
          config = this.config;
          docpad = this.docpad;
          // Prevent underscore files from being written if desired
          if (config.renderUnderscoreStylesheets === false) {
            this.underscoreStylesheets = docpad.getDatabase().findAllLive({
              filename: /^_(.*?)\.(?:scss|sass)/
            });
            return this.underscoreStylesheets.on('add', function (model) {
              return model.set({
                render: false,
                write: false
              });
            });
          }
        }

        // Render some content

      }, {
        key: 'render',
        value: function render(opts, next) {
          var command, commandOpts, config, execPath, file, fullDirPath, i, inExtension, len, locale, name, outExtension, ref;
          // Prepare
          config = this.config;
          locale = this.locale;

          // If SASS/SCSS then render
          inExtension = opts.inExtension;
          outExtension = opts.outExtension;
          file = opts.file;
          if ((inExtension === 'sass' || inExtension === 'scss') && (outExtension === 'css' || outExtension === null)) {
            // Fetch useful paths
            fullDirPath = file.get('fullDirPath');
            // Prepare the command and options
            commandOpts = {};
            execPath = config[inExtension + 'Path'];
            if (!execPath) {
              // Check if we have the executable for that extension
              return next(new Error(locale[inExtension + 'NotInstalled']));
            }
            if (opts.content.indexOf('@import') !== -1) {
              // Set referencesOthers if this document imports, as sass concatenates files together
              file.setMetaDefaults({
                'referencesOthers': true
              });
            }
            // Build our command
            command = [].concat(execPath);
            // ^ execPath can be an array or string, see https://github.com/docpad/docpad-plugin-sass/pull/26

            // Sourcemaps or stdin?
            if (config.sourcemap) {
              command.push(file.attributes.fullPath + ':' + file.attributes.outPath, '--no-cache', '--update', '--sourcemap');
            } else {
              command.push('--no-cache', '--stdin');
              commandOpts.stdin = opts.content;
            }
            if (fullDirPath) {
              command.push('--load-path');
              command.push(fullDirPath);
            }
            if (!config.requireLibraries) {
              config.requireLibraries = [];
            }
            if (config.loadPaths) {
              config.loadPaths.forEach(function (loadPath) {
                command.push('--load-path');
                return command.push(loadPath);
              });
            }
            if (config.compass) {
              command.push('--compass');
              if (config.requireLibraries.indexOf('compass') === -1) {
                config.requireLibraries.push('compass');
              }
            }
            if (config.debugInfo) {
              command.push('--debug-info');
            }
            if (config.outputStyle) {
              command.push('--style');
              command.push(config.outputStyle);
            }
            if (config.requireLibraries.length) {
              ref = config.requireLibraries;
              for (i = 0, len = ref.length; i < len; i++) {
                name = ref[i];
                command.push('--require');
                command.push(name);
              }
            }
            // Spawn the appropriate process to render the content
            return safeps.spawn(command, commandOpts, function (err, stdout, stderr) {
              if (err) {
                err.message += '\n\n' + ((stderr || '').toString() || (stdout || '').toString()).trim();
                err.message += '\n\nCommand:\n' + command.join(' ');
                err.message += '\n\nConfiguration:\n' + JSON.stringify(config, null, '  ');
                return next(err);
              }
              if (config.sourcemap) {
                return fs.readFile(file.attributes.outPath, function (err, result) {
                  if (err) {
                    return next(err);
                  }
                  opts.content = result.toString();
                  return next();
                });
              } else {
                opts.content = stdout.toString();
                return next();
              }
            });
          } else {
            // Done, return back to DocPad
            return next();
          }
        }
      }]);

      return SassPlugin;
    }(BasePlugin);

    ;

    // Plugin name
    SassPlugin.prototype.name = 'sass';

    // Plugin config
    // Only on the development environment use expanded, otherwise use compressed
    SassPlugin.prototype.config = {
      sassPath: null,
      scssPath: null,
      compass: null,
      debugInfo: false,
      sourcemap: false,
      outputStyle: 'compressed',
      requireLibraries: null,
      renderUnderscoreStylesheets: false,
      environments: {
        development: {
          outputStyle: 'expanded'
        }
      }
    };

    // Locale
    SassPlugin.prototype.locale = {
      sassNotInstalled: 'SASS does not appear to be available on your system',
      scssNotInstalled: 'SCSS does not appear to be available on your system'
    };

    return SassPlugin;
  }.call(this);
};